{"version":3,"sources":["../src/Boryx.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;IAEqB,K;AAKnB,mBAAmC;AAAA,QAAvB,IAAuB,uEAAhB;AAAE,MAAA,IAAI,EAAE;AAAR,KAAgB;AAAA;;AAAA;AAAA;AAAA,aAJzB;AAIyB;;AAAA;AAAA;AAAA,aAHxB;AAGwB;;AAAA;AAAA;AAAA,aAFzB;AAEyB;;AACjC,2DAAgB,IAAhB;AACD;;;;WAED,aAAI,IAAJ,EAAU,QAAV,EAAoB;AAClB,4DAAa,IAAb,CAAkB;AAChB,QAAA,MAAM,EAAE,KADQ;AAEhB,QAAA,IAAI,EAAJ,IAFgB;AAGhB,QAAA,QAAQ,EAAR;AAHgB,OAAlB;AAKD;;;WAED,gBAAO;AACL,oDAAO,IAAP;AACD;;;WAED,wBAAe;AAAA;;AACb,4DAAe,wBAAa,UAAC,GAAD,EAAM,GAAN,EAAc;AACxC,QAAA,GAAG,CAAC,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,QAAA,GAAG,CAAC,SAAJ,CAAc,GAAd,EAFwC,CAIxC;;AACA,YAAM,KAAK,GAAG,uCAAA,KAAI,UAAJ,CAAa,IAAb,CACZ,UAAC,CAAD;AAAA,iBAAO,CAAC,CAAC,IAAF,KAAW,GAAG,CAAC,GAAf,IAAsB,CAAC,CAAC,MAAF,KAAa,GAAG,CAAC,MAA9C;AAAA,SADY,CAAd,CALwC,CASxC;;AACA,YAAI,CAAC,KAAL,EAAY,OAAO,GAAG,CAAC,GAAJ,CAAQ,IAAI,CAAC,SAAL,CAAe;AAAE,UAAA,KAAK,EAAE;AAAT,SAAf,CAAR,CAAP,CAV4B,CAYxC;;AACA,eAAO,KAAK,CAAC,QAAN,CAAe,GAAf,EAAoB,GAApB,CAAP;AACD,OAdc,CAAf;AAgBA,oDAAO,IAAP;AACD;;;WAED,eAAqB;AAAA,UAAjB,QAAiB,uEAAN,IAAM;AACnB,UAAI,wCAAC,IAAD,UAAJ,EAAmB,KAAK,YAAL;AAEnB,4DAAa,MAAb,CAAoB,uDAAc,IAAlC;AAEA,UAAI,QAAJ,EAAc,QAAQ,wCAAC,IAAD,YAAR;AACf;;;;iGAED;AAAA;AAAA;AAAA;AAAA;AACE,sEAAa,KAAb;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O","file":"Boryx.cjs","sourcesContent":["import { createServer } from 'http'\n\nexport default class Boryx {\n  #routes = []\n  #options = null\n  #server = null\n\n  constructor(opts = { port: 3000 }) {\n    this.#options = opts\n  }\n\n  get(path, callback) {\n    this.#routes.push({\n      method: 'GET',\n      path,\n      callback,\n    })\n  }\n\n  list() {\n    return this.#routes\n  }\n\n  createServer() {\n    this.#server = createServer((req, res) => {\n      res.setHeader('Content-Type', 'application/json')\n      res.writeHead(200)\n\n      // find the good route\n      const route = this.#routes.find(\n        (r) => r.path === req.url && r.method === req.method\n      )\n\n      // return error when route not found\n      if (!route) return res.end(JSON.stringify({ error: 'Invalid request!' }))\n\n      // execute route callback\n      return route.callback(req, res)\n    })\n\n    return this.#server\n  }\n\n  run(callback = null) {\n    if (!this.#server) this.createServer()\n\n    this.#server.listen(this.#options.port)\n\n    if (callback) callback(this.#options)\n  }\n\n  async close() {\n    this.#server.close()\n  }\n}\n"]}